package com.ccd.tlj;


import com.codename1.io.Log;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Dialog;
import com.codename1.ui.Form;
import com.codename1.ui.Toolbar;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class TuoLaJi {

    private Form current;
    private Resources theme;

    private String uniqueID = null;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });

    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }

//        Display disp = Display.getInstance();
//        disp.lockOrientation(true);
        lockOrientation(false);
        Form hi = new Form("", new BorderLayout());

//        String s = "Hi World->\n" + "\u2660K";
//        String s = "Hi World: " + Character.toChars(0x1F0B4);
        String s = "Hi World: " + "\uD83C\uDCC1";
//        hi.add(BorderLayout.NORTH, new Label(s));
        Hand hand = new Hand();
        hand.addCard(new Card('S', 8));
        hand.addCard(new Card('H', 9));
        hand.addCard(new Card('D', 12));
        hand.addCard(new Card('C', 11));
        hand.addCard(new Card('D', 14));
        hand.addCard(new Card('C', 10));
        hand.addCard(new Card('D', 14));
        hand.addCard(new Card('C', 10));
        hand.addCard(new Card('S', 5));
        hand.addCard(new Card('S', 6));

        hand.addCard(new Card('S', 8));
        hand.addCard(new Card('D', 9));
        hand.addCard(new Card('D', 3));
        hand.addCard(new Card('C', 11));
        hand.addCard(new Card('H', 12));
        hand.addCard(new Card('D', 10));
        hand.addCard(new Card('S', 12));
        hand.addCard(new Card('H', 10));
        hand.addCard(new Card('S', 5));
        hand.addCard(new Card('S', 6));

        hand.addCard(new Card('S', 8));
        hand.addCard(new Card('H', 9));
        hand.addCard(new Card('S', 13));
        hand.addCard(new Card('C', 11));
        hand.addCard(new Card('D', 13));
        hand.addCard(new Card('S', 10));
        hand.addCard(new Card('D', 12));
        hand.addCard(new Card('H', 10));
        hand.addCard(new Card('S', 5));
        hand.addCard(new Card('S', 6));

        hand.addCard(new Card('V', Card.BigJokerRank));
        hand.addCard(new Card('V', Card.BigJokerRank));
        hand.addCard(new Card('V', Card.BigJokerRank));
        hand.addCard(new Card('V', Card.SmallJokerRank));
        hand.addCard(new Card('H', 9));
        hand.addCard(new Card('D', 9));
        hand.addCard(new Card('C', 11));
        hand.addCard(new Card('D', 12));
        hand.addCard(new Card('C', 10));
        hand.addCard(new Card('D', 12));
        hand.addCard(new Card('C', 10));

        hand.sortCards();

        hi.add(BorderLayout.CENTER, hand);

//        hi.setGlassPane((g, rect) -> {
//            g.setColor(0x0000ff);
//            g.drawRoundRect(10, 10, 100, 150, 15, 15);
//            g.drawString("A", 15, 12);
//            g.drawString("" + Hand.HEART, 12, 50);
//        });
        hi.show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
