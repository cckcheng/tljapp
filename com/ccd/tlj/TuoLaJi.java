package com.ccd.tlj;


import com.codename1.components.SpanLabel;
import com.codename1.io.Log;
import com.codename1.io.Storage;
import com.codename1.l10n.L10NManager;
import com.codename1.ui.Button;
import com.codename1.ui.ButtonGroup;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Label;
import com.codename1.ui.RadioButton;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import com.codename1.util.StringUtil;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class TuoLaJi {

    static public int BACKGROUND_COLOR = Card.DEBUG_MODE ? 0xffffff : 0x008000;
    private Form current;
    private Resources theme;

    private String uniqueID = null;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });

    }

    public Form formMain = null;
    private Label lbTitle;
    private Button btnPlay = null;
    private Button btnHelp = null;
    private Button btnExit = null;
    private Button btnSetting = null;

    public void enableButtons() {
        if (this.btnPlay != null) {
            this.btnPlay.setEnabled(true);
            this.btnPlay.setText(Dict.get(lang, "Play"));
        }
        if (this.btnHelp != null) {
            this.btnHelp.setEnabled(true);
        }
    }

    public void disableButtons() {
        if (this.btnPlay != null) {
            this.btnPlay.setEnabled(false);
            this.btnPlay.setText(Dict.get(lang, "Connecting") + "...");
        }
    }

    public void refreshButtons() {
        this.lbTitle.setText(Dict.get(lang, title));
        if (this.btnPlay.isEnabled()) {
            this.btnPlay.setText(Dict.get(lang, "Play"));
        }
        this.btnHelp.setText(Dict.get(lang, "Help"));
        this.btnExit.setText(Dict.get(lang, "Exit"));
        this.btnSetting.setText(Dict.get(lang, "Settings"));
        if (this.player != null) {
            this.player.refreshLang();
        }
    }

    private Player player = null;

    public void onConnectionError() {
        Player p = this.player;
        if (this.btnPlay != null) {
            this.btnPlay.setEnabled(false);
            this.btnPlay.setText(Dict.get(lang, "Network Error"));
            Button btn = this.btnPlay;
            if (this.currentComp == this.entry) {
                new UITimer(new Runnable() {
                    @Override
                    public void run() {
                        btn.setText(Dict.get(lang, "Connecting") + "...");
                        p.connectServer(false);
                    }
                }).schedule(5000, false, this.formMain);
            }
        }
    }

    public String version = "1.11";
//        String title = "Bid Tractor";
    public final static String title = "Langley TuoLaJi";

    public String lang = "en";
    private Container entry;
    private Container table;
    private Container help;

    public void start() {
        if(current != null){
            current.show();
            return;
        }

        Display disp = Display.getInstance();
        Object sObj = Storage.getInstance().readObject("lang");
        if (sObj != null) {
            this.lang = sObj.toString();
        } else {
            L10NManager l10n = disp.getLocalizationManager();
            this.lang = l10n.getLanguage();
            Storage.getInstance().writeObject("lang", this.lang);
        }

        String onlineHelp = getHelp();
        disp.lockOrientation(false);
        disp.requestFullScreen();
        disp.setNoSleep(true);
        disp.setScreenSaverEnabled(false);
        disp.setBuiltinSoundsEnabled(true);
        this.version = disp.getProperty("AppVersion", this.version);

        String playerId = getPlayerID(disp);
        if (playerId == null) {
            Dialog.show(Dict.get(lang, "Error"), "Failed to generate Player ID", Dict.get(lang, "OK"), "");
            disp.exitApplication();;
        }

        Form mainForm = new Form(title, new BorderLayout());
        this.formMain = mainForm;
        mainForm.getStyle().setBgColor(BACKGROUND_COLOR);
        mainForm.getToolbar().hideToolbar();

        this.player = new Player(playerId, this);

        this.entry = new Container(BoxLayout.yLast());
        this.table = new Container(new LayeredLayout());
        this.player.createTable(this.table);

//        mainForm.getToolbar().addCommandToLeftSideMenu("New Game", null, (e) -> {
//            Log.p("Start New Game");
//        });

//        Style sTitle = mainForm.getToolbar().getTitleComponent().getUnselectedStyle();
//        sTitle.setFont(Hand.fontSymbol);
        lbTitle = new Label(Dict.get(lang, title));
//        lbTitle.getStyle().setAlignment(CENTER);
        lbTitle.getStyle().setFont(Hand.fontRank);
        entry.add(lbTitle);

        Button bPlay = new Button(Dict.get(lang, "Connecting") + "...");
        bPlay.setEnabled(false);
        this.btnPlay = bPlay;

        FontImage.setMaterialIcon(bPlay, FontImage.MATERIAL_PEOPLE);
        bPlay.addActionListener((e) -> {
            Object sgObj = Storage.getInstance().readObject("playerName");
            if (sgObj == null || Card.TLJ_PORT == 6658) {
                TextField pName = new TextField("", Dict.get(lang, "Your Name"), 16, TextArea.ANY);
                pName.setMaxSize(16);
                if (sgObj != null) {
                    pName.setText(sgObj.toString());
                }
                Command pNameCmd = new Command(Dict.get(lang, "OK")) {
                    @Override
                    public void actionPerformed(ActionEvent ev) {
                        String playerName = savePlayerName(pName);
                        if (playerName == null) return;
                        bPlay.setEnabled(false);
                        player.startPlay(playerName);
                    }
                };
                Dialog.show("", pName, pNameCmd);
            } else {
                bPlay.setEnabled(false);
                this.player.startPlay(sgObj.toString());
            }
        });

//        BrowserComponent browser = new BrowserComponent();    // not work
//        WebBrowser browser = new WebBrowser();    // not work
//        browser.setURL(Card.HELP_URL);
//        browser.setPage(onlineHelp, null);
        SpanLabel helpContent = new SpanLabel();
        helpContent.setTextBlockAlign(Component.LEFT);
        helpContent.setText(onlineHelp);
//        helpContent.setText("TuoLaJi is a very popular Chinese card game.\nMore help\nmorehelp");
//        Dialog helpDlg = new Dialog(BorderLayout.center());
        Dialog helpDlg = new Dialog(BoxLayout.y());
        helpDlg.setScrollableY(true);
        helpDlg.setScrollableX(false);
//        helpDlg.add(BorderLayout.CENTER, browser);
//        helpDlg.add(BorderLayout.CENTER, helpContent);
        helpDlg.add(helpContent);
        helpDlg.add(theme.getImage("a1.png").scaledWidth(disp.getDisplayWidth() - 400));

        helpDlg.setDisposeWhenPointerOutOfBounds(true);
        btnHelp = new Button(Dict.get(lang, "Help"));
        FontImage.setMaterialIcon(btnHelp, FontImage.MATERIAL_HELP);
//        btnHelp.setEnabled(false);
        btnHelp.addActionListener((e) -> {
//            switchScene("table");
//            helpDlg.show(0, 0, 100, 100);
            showHelp();
        });

        btnExit = new Button(Dict.get(lang, "Exit"));
        FontImage.setMaterialIcon(btnExit, FontImage.MATERIAL_EXIT_TO_APP);
        btnExit.addActionListener((e) -> {
            disp.playBuiltinSound(Display.SOUND_TYPE_ALARM);
            if (this.player != null) {
                player.disconnect();
            }
            Display.getInstance().exitApplication();
        });

        btnSetting = new Button(Dict.get(lang, "Settings"));
        FontImage.setMaterialIcon(btnSetting, FontImage.MATERIAL_SETTINGS);
        btnSetting.addActionListener((e) -> {
            disp.playBuiltinSound(Display.SOUND_TYPE_WARNING);
            TextField pName = new TextField("", Dict.get(lang, "Your Name"), 16, TextArea.ANY);
            pName.setMaxSize(16);
            Object sgObj = Storage.getInstance().readObject("playerName");
            if (sgObj != null) {
                pName.setText(sgObj.toString());
            }
//            Dialog settingDlg = new Dialog(Dict.get(lang, "Settings"), new BorderLayout());
            TableLayout tl = new TableLayout(2, 2);
            Container props = new Container(tl);
//            settingDlg.add(BorderLayout.CENTER, TableLayout.encloseIn(2, true,
//                    new Label(Dict.get(lang, "Player Name")), pName,
//                    new Label(Dict.get(lang, "Version")), new Label(this.version)
//            ));

            props.add(tl.createConstraint().widthPercentage(30).horizontalAlign(Component.RIGHT), new Label(Dict.get(lang, "Player Name"))).add(pName)
                    .add(tl.createConstraint().widthPercentage(30).horizontalAlign(Component.RIGHT), new Label(Dict.get(lang, "Version"))).add(new Label(this.version));
            Command okCmd = new Command(Dict.get(lang, "OK")) {
                @Override
                public void actionPerformed(ActionEvent ev) {
                    String playerName = savePlayerName(pName);
                    if (playerName == null) return;
                    player.setPlayerName(playerName);
                }
            };
//            settingDlg.add(BorderLayout.CENTER, props);
//            settingDlg.add(BorderLayout.SOUTH, new Button(okCmd));
//            settingDlg.setDisposeWhenPointerOutOfBounds(true);
//            settingDlg.show(0, 0, 200, 200);
            Dialog.show(Dict.get(lang, "Settings"), props, okCmd);
        });

        RadioButton rbEn = new RadioButton("English");
        RadioButton rbZh = new RadioButton("中文");
        ButtonGroup btnGroup = new ButtonGroup(rbEn, rbZh);
        btnGroup.addActionListener((e) -> {
            if (rbEn.isSelected()) {
                this.lang = "en";
            } else if (rbZh.isSelected()) {
                this.lang = "zh";
            }
            Storage.getInstance().writeObject("lang", this.lang);
            refreshButtons();
        });
        if (lang.equalsIgnoreCase("zh")) {
            rbZh.setSelected(true);
        } else {
            rbEn.setSelected(true);
        }

        entry.add(this.btnPlay)
                .add(this.btnHelp)
                .add(this.btnSetting)
                .add(this.btnExit);
        entry.add(BoxLayout.encloseX(rbEn, rbZh));

        mainForm.add(BorderLayout.CENTER, entry);
        this.currentComp = entry;
        mainForm.show();

        this.player.connectServer(false);
    }

    private String savePlayerName(TextField pName) {
        String playerName = pName.getText().trim();
        if (playerName.isEmpty()) return null;
        pName.stopEditing();
        playerName = StringUtil.replaceAll(playerName, "\"", "");
        playerName = StringUtil.replaceAll(playerName, "\\", "");
        playerName = StringUtil.replaceAll(playerName, "'", "");
        if (playerName.isEmpty()) return null;
        Storage.getInstance().writeObject("playerName", playerName);
        return playerName;
    }

    private Component currentComp;
    public void switchScene(final String scene) {
//        this.formMain.removeAll();
        switch (scene) {
            case "entry":
                if (this.currentComp != this.entry) {
                    this.formMain.replaceAndWait(currentComp, this.entry, null);
//                this.formMain.add(BorderLayout.CENTER, this.entry);
                    this.currentComp = this.entry;
                }
                break;
            case "table":
                if (this.currentComp != this.table) {
                    this.formMain.replaceAndWait(currentComp, this.table, null);
//                this.formMain.add(BorderLayout.CENTER, this.table);
                    this.currentComp = this.table;
                }
                break;
            case "help":
                if (this.currentComp != this.help) {
                    this.formMain.replaceAndWait(currentComp, this.help, null);
//                this.formMain.add(BorderLayout.CENTER, this.table);
                    this.currentComp = this.help;
                }
                break;
        }

        this.formMain.setGlassPane(null);
        this.formMain.repaint();
    }

    private String getPlayerID(Display disp) {
        String playerId = null;
        try {
//        List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());
// WifiManager wimanager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
//    String macAddress = wimanager.getConnectionInfo().getMacAddress();

            // skip this for now, may implement in future
//            String udid = disp.getUdid();
//            if (udid != null && !udid.trim().isEmpty()) {
//                return udid.trim();
//            }
//            String msisdn = disp.getMsisdn();
//            if (msisdn != null && !msisdn.trim().isEmpty()) {
//                return msisdn.trim();
//            }

            Storage storage = Storage.getInstance();
            Object pId = storage.readObject("playerId");
            if (pId == null || !pId.toString().startsWith("TLJ")) {
                pId = "TLJ" + Long.toString(System.currentTimeMillis(), 16);
                storage.writeObject("playerId", pId);
            }
            playerId = pId.toString();
        } catch (Exception e) {
            Dialog.show("Fail to get player ID", e.getMessage(), "OK", "");
        }
        return playerId;
    }
    /*
    private String getHelp1() {
        try {
            ConnectionRequest r = new ConnectionRequest();
            r.setPost(false);
            r.setUrl(Card.HELP_URL);
            NetworkManager.getInstance().addToQueueAndWait(r);
            Map<String, Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
            Map<String, Object> response = (Map<String, Object>) result.get("response");
            return response.get("listings").toString();
        } catch (Exception err) {
            Log.e(err);
            return null;
        }
    }

    private String getHelp2() {
        try {
            URL u = new URL(Card.HELP_URL);
            URL.HttpURLConnection conn = (URL.HttpURLConnection) u.openConnection();
            conn.connect();
            InputStreamReader in = new InputStreamReader(conn.getInputStream());

            StringBuilder s = new StringBuilder();
            char[] buf = new char[2048];
            int num = 0;
            while ((num = in.read(buf)) != -1) {
                s.append(buf, 0, num);
            }
            return s.toString();
        } catch (Exception err) {
            Log.e(err);
            return "Not Available";
        }
    }
*/
    private String getHelp() {
        String s = "TBA\n";
        for (int i = 0; i < 10; i++) {
            s += "Test " + i + "\n";
        }
        return s;
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

    private void showHelp() {
        if (this.help != null) {
            this.switchScene("help");
            return;
        }

        this.help = new Container(new LayeredLayout());

//        Container content = new Container(BoxLayout.y());
        Container content = new Container();
        content.setScrollableY(true);
        content.setScrollableX(false);

        SpanLabel lb = new SpanLabel("This game is played by six players,"
                + " using four full decks. Each player is dealt with 35 cards,"
                + " while the remaining 6 cards will be added to the declarer later."
                + " The bidding procedure is similar to Bridge game, each player can bid a specific point or pass."
                + " The declarer is the player who made the final point bid (contract point)."
                + " That means, after this point bid, other players all pass."
                + " Then the declarer choose which suit is trump, or NT means no-trump."
                + " After that, the remaining 6 cards is added to the declarer’s hand."
                + " The declarer then select any 6 cards to throw out, as the hole cards."
                + " At this point, the declarer can define the partner condition:"
                + " e.g. 2nd ♠A, it means who plays the second ♠A will be the declarer’s partner,"
                + " then all other 4 players will be the defenders."
                + " The defenders need collect enough points (equals or greater than the contract point) to beat the contract.");
        content.add(lb);
        Label boldLabel = new Label("Playing Stage:");
        boldLabel.getStyle().setFont(Hand.fontGeneral);
        content.add(boldLabel);
        lb = new SpanLabel("The declarer plays the first hand, then each player plays in a counter-clockwise order."
                + " The player who wins this round collects all the points (sum all the point cards played, if any),"
                + " and will be the next leading player, and so on."
                + " If a defender wins the final round and there are point cards in the hole cards,"
                + " the total points in the hole cards will be times by a multiple (4 or more, depends on the winning hand strength) and added the defenders’ collected points."
                + " If the contract is made, the declarer and partner is promoted to next rank,"
                + " otherwise the defenders are promoted to next rank.");
        content.add(lb);

        Container p = new Container();
        content.add(p);
        boldLabel = new Label("Point Cards: ");
        boldLabel.getStyle().setFont(Hand.fontGeneral);
        p.add(boldLabel);
        p.add(new Label("5 (5 points), 10 and K (10 points)."))
                .add(new Label(" 100 points per deck,"))
                .add(new Label(" total points is 400."));

        p = new Container();
        content.add(p);
        boldLabel = new Label("Card Rank");
        boldLabel.getStyle().setFont(Hand.fontGeneral);
        p.add(boldLabel);
        p.add(new Label(" (from low to high):"))
                .add(new Label(" 2, 3, 4 … 10, J, Q, K, A,"))
                .add(new Label(" game rank (not in trump suit),"))
                .add(new Label(" game rank (in trump suit), Black Joker, Red Joker."));

        p = new Container();
        content.add(p);
        boldLabel = new Label("Game Rank: ");
        boldLabel.getStyle().setFont(Hand.fontGeneral);
        p.add(boldLabel);
        p.add(new Label("The declarer’s current rank"))
                .add(new Label(" (In general, each match begins from Rank 2)"));
        p = new Container();
        content.add(p);
        p.add(new SpanLabel(
                "Trump: Red Joker, Black Joker and the game rank cards are always trumps (even in a NT game).\n"
                + "Flop Play: The leading player plays multiple combinations together. To make it a valid play, all the combinations must not be beaten by other players. \n"
                + "    e.g. the leading player try play ♥A♥K♥K, but another player has ♥A♥A, then the leading player is forced to play ♥K♥K (♥A will be returned to his/her hand), and get a 10 point penalty (each card returned get a 10 point penalty).\n"
                + "Ruff: A player can ruff by using his/her trump if the leading suit is empty in his/her hand.\n"
                + "Overruff: If the leading hand is a Flop, and two players can ruff, then only the strongest(longest) combination is compared to determine which is the winning hand. \n"
                + "    e.g. suppose ♥ is trump, game rank is 10 \n"
                + "    a. the leading hand is ♠AQQJJ, one player ruffs with ♥A6655, then another player can overruff with ♥59988 \n"
                + "    b. the leading hand is ♠AAJJ, one player ruffs with ♥JJ99, then another player can overruff with ♥QQ22\n"
                + "\n"
                + "DaGuang: Defenders collected no point, declarer and partner is promoted by 3 ranks.\n"
                + "XiaoGuang: The total collected points are less than half of the contract point, declarer and partner is promoted by 2 ranks.\n"
                + "Bounce: The total collected points minus the contract point, for each additional 80 points, the defenders are promoted by 1 more rank.\n"
                + "1 vs 5: At the beginning of playing stage, the declarer can choose “1 vs 5” (no partner). If the contract is made, the declarer will get double promotion.\n"
                + "Match: The player whose rank passes Rank A wins the match. A full match (2 -> A) usually takes 3.5 to 4.5 hours.\n"
                + "\n"
                + "Card Combinations\n"
                + "Single: a single card\n"
                + "Pair: 2 same cards\n"
                + "Tractor: connected pairs: e.g. 2233, 667788, 5577(while 6 is the game rank), ♠K♠K♠A♠A♥5♥5♠5♠5BBRR (while game rank is 5 and ♠ is trump, B is Black Joker, R is Red Joker)\n"
                + "Trips: 3 same cards (if leaded, other player has to follow a pair if he has no trips to play)\n"
                + "Quads: 4 same cards (bomb, can beat 2-pair tractor; if leaded, the follow play preference is: quads, trips + single, 2-pair tractor, 2 pairs, 1 pair + 2 singles, 4 singles)\n"
                + "Bulldozer: connected trips (or quads): e.g. 444555, JJJQQQKKK (if leaded, the follow play preference is (for 2-trips bulldozer): 2 trips, 1 trips + 1 pair + 1 single, 2-pair tractor + 2 singles, 2 pairs + 2 singles, 1 pair + 4 singles, 6 singles)"
        ));

        Button bReturn = new Button();
        FontImage.setMaterialIcon(bReturn, FontImage.MATERIAL_EXIT_TO_APP);
        bReturn.setUIID("return");
        bReturn.addActionListener((e) -> {
            this.switchScene("entry");
        });

        this.help.add(content).add(bReturn);
        LayeredLayout ll = (LayeredLayout) help.getLayout();
        ll.setInsets(bReturn, "auto 0 0 auto");  //top right bottom left
        this.switchScene("help");
    }
}
